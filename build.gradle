plugins {
    id 'application'
}

apply plugin: 'java' // adds 'test' task

mainClassName = 'edu.uiowa.kind2.Main'

task kind2JavaClientMain(type: Jar) {
    manifest {
        attributes 'Main-Class': 'edu.uiowa.kind2.Main'
    }
    archivesBaseName = 'kind2-explanationsMain'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

compileJava.finalizedBy kind2JavaClientMain

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.6.2')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.6.2')
}

compileJava {
    sourceCompatibility = JavaVersion.current()
    targetCompatibility = JavaVersion.current()
}


test {
    // enable JUnit Platform (a.k.a. JUnit 5) support
    useJUnitPlatform()

    // set a system property for the test JVM(s)
    systemProperty 'some.prop', 'value'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // Fail the 'test' task on the first test failure
    failFast = false

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}
